sqrt(diag(vcov(lm6.1)))  # standard errors of the coefficients
# Plot of the variance-covariance matrix of Y (first 8 observations)
# --> it is a diagonal matrix with a value of 12.38^2
par(mar = c(4,4,4,4))
# Confidence intervals for the coefficients
alpha=0.05
confint(lm6.1,level = 1 - alpha)
# Confidence intervals for the coefficients
alpha=0.05
confint(lm6.1,level = 1 - alpha)
# We can correct them through Bonferroni
confint(lm6.1,level = 1 - alpha/length(lm6.1$coefficients))
length(lm6.1$coefficients)
1 - alpha/length(lm6.1$coefficients
)
# We can correct them through Bonferroni
confint(lm6.1,level = 1 - alpha/length(lm6.1$coefficients))
# Step 1: we generate new observations (within the range of the observed values)
X.new <- data.frame(time.f = ordered(rep(c('4wks', '12wks', '24wks', '52wks' ),3)),
visual0 = c(rep(50,4), rep(60,4), rep(55,4)),
treat.f = factor(c(rep('Active',4), rep('Placebo',4), rep('Active',4)))
)
X.new
# Step 2: we build the intervals (for each single observation)
IC <-predict(lm6.1, X.new, interval="confidence", level=0.95)
IC
# Step 1: we generate new observations - 3 patients (within the range of the observed values)
X.new <- data.frame(time.f = ordered(rep(c('4wks', '12wks', '24wks', '52wks' ),3)),
visual0 = c(rep(50,4), rep(60,4), rep(55,4)),
treat.f = factor(c(rep('Active',4), rep('Placebo',4), rep('Active',4)))
)
X.new
# Step 2: we build the intervals (for each single observation)
IC <-predict(lm6.1, X.new, interval="confidence", level=0.95)
IC
IP <-predict(lm6.1, X.new, interval="prediction", level=0.95)
IP
?predict.lm
x <- rnorm(15)
y <- x + rnorm(15)
predict(lm(y ~ x))
new <- data.frame(x = seq(-3, 3, 0.5))
predict(lm(y ~ x), new, se.fit = TRUE)
pred.w.plim <- predict(lm(y ~ x), new, interval = "prediction")
pred.w.clim <- predict(lm(y ~ x), new, interval = "confidence")
matplot(new$x, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
anova(lm6.1)                               # ANOVA table
# Comment #1
# NB. p-value for the F-test for time.f:treat.f is significant (at the 5%)
# --> presence of a time-varying treatment effect.
summary(lm6.1)
anova(lm6.1)                               # ANOVA table
# Comment #1
# NB. p-value for the F-test for time.f:treat.f is significant (at the 5%)
# --> presence of a time-varying treatment effect.
summary(lm6.1)
anova(lm6.1)                               # ANOVA table
lm1.form2 <- formula(visual ~ -1 + visual0 + time.f)
lm6.1_2 <- lm(lm1.form2, data = armd)         # through lm()
summ2 <- summary(lm6.1_2)                     # Summary
summ2
anova(lm6.1_2, lm6.1)                         # fm6.1_2 nested in fm6.1
library(car)
# 1. the variable treat.f
linearHypothesis(lm6.1,
rbind(c(0,0,0,0,0,1,0,0,0),
c(0,0,0,0,0,0,1,0,0),
c(0,0,0,0,0,0,0,1,0),
c(0,0,0,0,0,0,0,0,1)),
c(0,0,0,0))
x11()
plot(fitted(lm6.1), residuals(lm6.1)) # residuals() can be replaced by resid() or lm6.1$residuals
abline(h = seq(-40, 40, by = 20), col = "grey")
abline(v = seq( 10, 80, by = 10), col = "grey")
qqnorm(residuals(lm6.1))
qqline(residuals(lm6.1))
qqnorm(residuals(lm6.1))
qqline(residuals(lm6.1))
plot(fitted(lm6.1), residuals(lm6.1)) # residuals() can be replaced by resid() or lm6.1$residuals
abline(h = seq(-40, 40, by = 20), col = "grey")
abline(v = seq( 10, 80, by = 10), col = "grey")
qqnorm(residuals(lm6.1))
qqline(residuals(lm6.1))
shapiro.test(lm6.1$residuals) # problem confirmed by shapiro.test
x11()
par(mfrow = c(2,2))
plot(lm6.1)
plot(lm6.1$residuals)
abline(h=0)
# let's color the residuals relative to different time instants
set.seed(1)
colori =rainbow(4)
colori2 = colori[armd$tp] # associate to each one of the 4 time instants a color
plot(lm6.1$residuals, col=colori2, ylab='residuals')
abline(h=0)
legend(650, -25, legend=c("time 4wks", "time 12wks", "time 24wks", "time 52wks"),
col=colori, lty=1, cex=0.7) # --> not very informative!
boxplot(lm6.1$residuals ~ armd$time.f, col=colori,
xlab='Time.f', ylab='Residuals') # --> informative
boxplot(lm6.1$residuals ~ armd$time.f, col=colori,
xlab='Time.f', ylab='Residuals') # --> informative
rm(list=ls())
library(settings)
reset(options)
graphics.off()
library(nlmeU)  # --> for the dataset
library(nlme)   # --> for models implementation
library(lattice)
library(corrplot)
library(plot.matrix)
data(armd.wide) # --> wide format
head(armd.wide) # lesion and line0 contain additional information, which we won't use
help(armd.wide)
help(armd.wide)
dim(armd.wide)
str(armd.wide)
data(armd0)     # --> long (or longitudinal) format
head(armd0)     # new features: time.f, time, tp, and visual
data(armd0)     # --> long (or longitudinal) format
head(armd0)     # new features: time.f, time, tp, and visual
help(armd0)
data(armd)      # --> long (or longitudinal) format (subset of armd0, without baseline)
head(armd)
# armd was built from armd0 as follows:
auxDt <- subset(armd0, time > 0)          # Post-baseline measures
dim(auxDt)                                # No. of rows & cols
levels(auxDt$time.f)                      # Levels of treat.f
armd <- droplevels(auxDt)                 # Drop unused levels
levels(armd$time.f)                       # Baseline level dropped
armd <- within(armd, {                    # Contrasts assigned for dealing with ORDERED factors
contrasts(time.f) <- contr.poly(4, scores = c(4, 12, 24, 52)) # we are changing scores
# If you are interested in further details, see 1.5.1 in 1_5_Supplementary.R
})
armd0.subset <- subset(armd0, as.numeric(subject) %in% seq(1, 240, 5)) # one each 5 patients
xy1 <- xyplot(visual ~ time | treat.f,
# visual and time are plotted against each other in separate
# panels for different values of 'treat.f' factor.
groups = subject,
data = armd0.subset,
type = "l", lty = 1)
update(xy1, xlab = "Time (in weeks)",
ylab = "Visual acuity",
grid = "h")
xy1 <- xyplot(visual ~ time | treat.f,
# visual and time are plotted against each other in separate
# panels for different values of 'treat.f' factor.
groups = subject,
data = armd0.subset,
type = "l", lty = 1)
update(xy1, xlab = "Time (in weeks)",
ylab = "Visual acuity",
grid = "h")
# The factor miss.pat that indicates which of the four
# post-randomization measurements are missing for a particular patient
table(armd.wide$miss.pat)
list(armd0$time.f, armd0$treat.f)
# sample means across time and treatment
flst <- list(armd0$time.f, armd0$treat.f)                                     # "By" factors
(tN <-  tapply(armd0$visual, flst, FUN = function(x) length(x[!is.na(x)])))   # Counts
tMn <- tapply(armd0$visual, flst, FUN = mean)     # Sample means
tMd <- tapply(armd0$visual, flst, FUN = median)   # Sample medians
colnames(res  <- cbind(tN, tMn, tMd))             # Column names
nms1 <- rep(c("P", "A"), 3)
nms2 <- rep(c("n", "Mean", "Mdn"), rep(2, 3))
colnames(res) <- paste(nms1, nms2, sep = ":")     # New column names
res
bw1 <- bwplot(visual ~ time.f | treat.f, data = armd0)  # bwplot from package lattice
xlims <- c("Base", "4\nwks", "12\nwks", "24\nwks", "52\nwks")
update(bw1, xlim = xlims, pch = "|")
# measurements for complete cases only (n = 188)
visual.x <- subset(armd.wide, select = c(visual0:visual52))
(varx <- var(visual.x, use = "complete.obs"))            # Var-cov matrix
plot(varx, col=colorRampPalette(c("blue", "white", "red")))
# increase of the variance of visual acuity measurements obtained at later timepoints.
diag(varx)                                               # Var-cov diagonal elements
print(cor(visual.x, use = "complete.obs"), digits = 2)   # Corr matrix
cov2cor(varx)                                            # Corr matrix (alternative way)
plot(cov2cor(varx), col=colorRampPalette(c("blue", "white", "red")))
#______________________________________________________________________________#
##### 1.1.3 ARMD Trial: Linear Model with Homogeneous Variance (Chapter 6) #####
#______________________________________________________________________________#
data(armd, package = "nlmeU")
lm1.form <- formula(visual ~ -1 + visual0 + time.f + treat.f:time.f )
# we now fit the linear model
lm6.1 <- lm(lm1.form, data = armd)         # through lm()
lm6.1
summ <- summary(lm6.1)                     # Summary
summ
lm6.1$rank               # rank
lm6.1$df.residual        # degrees of freedom of the model (n-rank)
lm6.1$model              # the dataframe
rstandard(lm6.1)         # the standardized residuals
summ$sigma               # sigma (estimate of the residual standard deviation)
vcov(lm6.1)              # variance-covariance matrix
sqrt(diag(vcov(lm6.1)))  # standard errors of the coefficients
summ <- summary(lm6.1)                     # Summary
summ
# How to obtain information from our lm
lm6.1$coefficients       # the betas
lm6.1$residuals          # ^epsilon
lm6.1$rank               # rank
lm6.1$fitted.values      # ^y
lm6.1$df.residual        # degrees of freedom of the model (n-rank)
lm6.1$model              # the dataframe
rstandard(lm6.1)         # the standardized residuals
summ$sigma               # sigma (estimate of the residual standard deviation)
vcov(lm6.1)              # variance-covariance matrix
sqrt(diag(vcov(lm6.1)))  # standard errors of the coefficients
# Plot of the variance-covariance matrix of Y (first 8 observations)
# --> it is a diagonal matrix with a value of 12.38^2
par(mar = c(4,4,4,4))
plot(diag(x=12.38^2, nrow=8, ncol=8),
col=colorRampPalette(c("blue", "white", "red")),
main='Variance-covariance matrix of Y')
# Confidence intervals for the coefficients
alpha=0.05
# Confidence intervals for the coefficients
alpha = 0.05
confint(lm6.1,level = 1 - alpha)
summ
# Step 1: we generate new observations - 3 patients (within the range of the observed values)
X.new <- data.frame(time.f = ordered(rep(c('4wks', '12wks', '24wks', '52wks' ),3)),
visual0 = c(rep(50,4), rep(60,4), rep(55,4)),
treat.f = factor(c(rep('Active',4), rep('Placebo',4), rep('Active',4)))
)
X.new
# Step 2: we build the intervals (for each single observation)
IC <-predict(lm6.1, X.new, interval="confidence", level=0.95)
IC
IP <-predict(lm6.1, X.new, interval="prediction", level=0.95)
IP
?predict.lm # look at the plot in the example below
x <- rnorm(15)
y <- x + rnorm(15)
predict(lm(y ~ x))
new <- data.frame(x = seq(-3, 3, 0.5))
predict(lm(y ~ x), new, se.fit = TRUE)
pred.w.plim <- predict(lm(y ~ x), new, interval = "prediction")
pred.w.clim <- predict(lm(y ~ x), new, interval = "confidence")
matplot(new$x, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
anova(lm6.1)                               # ANOVA table
# Comment #1
# NB. p-value for the F-test for time.f:treat.f is significant (at the 5%)
# --> presence of a time-varying treatment effect.
summary(lm6.1)
rm(list=ls())
library(settings)
reset(options)
graphics.off()
library(nlmeU)  # --> for the dataset
library(nlme)   # --> for models implementation
library(nlme)   # --> for models implementation
library(lattice)
library(corrplot)
library(plot.matrix)
data(armd.wide) # --> wide format
head(armd.wide) # lesion and line0 contain additional information, which we won't use
data(armd0)     # --> long (or longitudinal) format
head(armd0)     # new features: time.f, time, tp, and visual
data(armd)      # --> long (or longitudinal) format (subset of armd0, without baseline)
head(armd)
help(armd)
dim(armd)
str(armd)
# armd was built from armd0 as follows:
auxDt <- subset(armd0, time > 0)          # Post-baseline measures
# armd was built from armd0 as follows:
auxDt <- subset(armd0, time > 0)          # Post-baseline measures
dim(auxDt)                                # No. of rows & cols
levels(auxDt$time.f)                      # Levels of treat.f
armd <- droplevels(auxDt)                 # Drop unused levels
levels(armd$time.f)                       # Baseline level dropped
armd <- within(armd, {                    # Contrasts assigned for dealing with ORDERED factors
contrasts(time.f) <- contr.poly(4, scores = c(4, 12, 24, 52)) # we are changing scores
# If you are interested in further details, see 1.5.1 in 1_5_Supplementary.R
})
data(armd)      # --> long (or longitudinal) format (subset of armd0, without baseline)
head(armd)
armd0.subset <- subset(armd0, as.numeric(subject) %in% seq(1, 240, 5)) # one each 5 patients
xy1 <- xyplot(visual ~ time | treat.f,
# visual and time are plotted against each other in separate
# panels for different values of 'treat.f' factor.
groups = subject,
data = armd0.subset,
type = "l", lty = 1)
update(xy1, xlab = "Time (in weeks)",
ylab = "Visual acuity",
grid = "h")
# The factor miss.pat that indicates which of the four
# post-randomization measurements are missing for a particular patient
table(armd.wide$miss.pat)
# sample means across time and treatment
flst <- list(armd0$time.f, armd0$treat.f)                                     # "By" factors
(tN <-  tapply(armd0$visual, flst, FUN = function(x) length(x[!is.na(x)])))   # Counts
tMn <- tapply(armd0$visual, flst, FUN = mean)     # Sample means
tMd <- tapply(armd0$visual, flst, FUN = median)   # Sample medians
colnames(res  <- cbind(tN, tMn, tMd))             # Column names
nms1 <- rep(c("P", "A"), 3)
nms2 <- rep(c("n", "Mean", "Mdn"), rep(2, 3))
colnames(res) <- paste(nms1, nms2, sep = ":")     # New column names
res
bw1 <- bwplot(visual ~ time.f | treat.f, data = armd0)  # bwplot from package lattice
xlims <- c("Base", "4\nwks", "12\nwks", "24\nwks", "52\nwks")
update(bw1, xlim = xlims, pch = "|")
# measurements for complete cases only (n = 188)
visual.x <- subset(armd.wide, select = c(visual0:visual52))
(varx <- var(visual.x, use = "complete.obs"))            # Var-cov matrix
(varx <- var(visual.x, use = "complete.obs"))            # Var-cov matrix
plot(varx, col=colorRampPalette(c("blue", "white", "red")))
# increase of the variance of visual acuity measurements obtained at later timepoints.
diag(varx)                                               # Var-cov diagonal elements
print(cor(visual.x, use = "complete.obs"), digits = 2)   # Corr matrix
cov2cor(varx)                                            # Corr matrix (alternative way)
lm1.form <- formula(visual ~ -1 + visual0 + time.f + treat.f:time.f )
# we now fit the linear model
lm6.1 <- lm(lm1.form, data = armd)         # through lm()
lm6.1
summ <- summary(lm6.1)                     # Summary
summ
# How to obtain information from our lm
lm6.1$coefficients       # the betas
lm6.1$residuals          # ^epsilon
lm6.1$rank               # rank
lm6.1$fitted.values      # ^y
lm6.1$df.residual        # degrees of freedom of the model (n-rank)
lm6.1$model              # the dataframe
rstandard(lm6.1)         # the standardized residuals
summ$sigma               # sigma (estimate of the residual standard deviation)
vcov(lm6.1)              # variance-covariance matrix
sqrt(diag(vcov(lm6.1)))  # standard errors of the coefficients
plot(diag(x=12.38^2, nrow=8, ncol=8),
col=colorRampPalette(c("blue", "white", "red")),
main='Variance-covariance matrix of Y')
# Confidence intervals for the coefficients
alpha = 0.05
confint(lm6.1,level = 1 - alpha)
# Confidence intervals for the coefficients
alpha = 0.05
confint(lm6.1,level = 1 - alpha)
length(lm6.1$coefficients)
# We can correct them through Bonferroni
confint(lm6.1,level = 1 - alpha/length(lm6.1$coefficients))
# Step 1: we generate new observations - 3 patients (within the range of the observed values)
X.new <- data.frame(time.f = ordered(rep(c('4wks', '12wks', '24wks', '52wks' ),3)),
visual0 = c(rep(50,4), rep(60,4), rep(55,4)),
treat.f = factor(c(rep('Active',4), rep('Placebo',4), rep('Active',4)))
)
X.new
# Step 2: we build the intervals (for each single observation)
IC <-predict(lm6.1, X.new, interval="confidence", level=0.95)
IC
IP <-predict(lm6.1, X.new, interval="prediction", level=0.95)
IP
?predict.lm # look at the plot in the example below
x <- rnorm(15)
y <- x + rnorm(15)
predict(lm(y ~ x))
new <- data.frame(x = seq(-3, 3, 0.5))
predict(lm(y ~ x), new, se.fit = TRUE)
pred.w.plim <- predict(lm(y ~ x), new, interval = "prediction")
pred.w.clim <- predict(lm(y ~ x), new, interval = "confidence")
matplot(new$x, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
anova(lm6.1)                               # ANOVA table
# Comment #1
# NB. p-value for the F-test for time.f:treat.f is significant (at the 5%)
# --> presence of a time-varying treatment effect.
summary(lm6.1)
anova(lm6.1)                               # ANOVA table
# Comment #1
# NB. p-value for the F-test for time.f:treat.f is significant (at the 5%)
# --> presence of a time-varying treatment effect.
summary(lm6.1)
anova(lm6.1)                               # ANOVA table
lm1.form2 <- formula(visual ~ -1 + visual0 + time.f)
lm6.1_2 <- lm(lm1.form2, data = armd)         # through lm()
summ2 <- summary(lm6.1_2)                     # Summary
summ2
anova(lm6.1_2, lm6.1)                         # fm6.1_2 nested in fm6.1
library(car)
rbind(c(0,0,0,0,0,1,0,0,0),
c(0,0,0,0,0,0,1,0,0),
c(0,0,0,0,0,0,0,1,0),
c(0,0,0,0,0,0,0,0,1))
# Hypothesis testing
# is it necessary to include in the model:...?
# 1. the variable treat.f;
# 2. the variable time.f;
# 3. the effect of the variable time.f on the intercept.
summary(lm6.1)
# 1. the variable treat.f
linearHypothesis(lm6.1,
rbind(c(0,0,0,0,0,1,0,0,0),
c(0,0,0,0,0,0,1,0,0),
c(0,0,0,0,0,0,0,1,0),
c(0,0,0,0,0,0,0,0,1)),
c(0,0,0,0))
# 2. the variable time.f
linearHypothesis(lm6.1,
rbind(c(0,1,0,0,0,0,0,0,0),
c(0,0,1,0,0,0,0,0,0),
c(0,0,0,1,0,0,0,0,0),
c(0,0,0,0,1,0,0,0,0),
c(0,0,0,0,0,1,0,0,0),
c(0,0,0,0,0,0,1,0,0),
c(0,0,0,0,0,0,0,1,0),
c(0,0,0,0,0,0,0,0,1)),
c(0,0,0,0,0,0,0,0))
# 3. the effect of the variable time.f on the intercept
linearHypothesis(lm6.1,
rbind(c(0,1,0,0,0,0,0,0,0),
c(0,0,1,0,0,0,0,0,0),
c(0,0,0,1,0,0,0,0,0),
c(0,0,0,0,1,0,0,0,0)),
c(0,0,0,0))
# 2. the variable time.f
linearHypothesis(lm6.1,
rbind(c(0,1,0,0,0,0,0,0,0),
c(0,0,1,0,0,0,0,0,0),
c(0,0,0,1,0,0,0,0,0),
c(0,0,0,0,1,0,0,0,0),
c(0,0,0,0,0,1,0,0,0),
c(0,0,0,0,0,0,1,0,0),
c(0,0,0,0,0,0,0,1,0),
c(0,0,0,0,0,0,0,0,1)),
c(0,0,0,0,0,0,0,0))
# 3. the effect of the variable time.f on the intercept
linearHypothesis(lm6.1,
rbind(c(0,1,0,0,0,0,0,0,0),
c(0,0,1,0,0,0,0,0,0),
c(0,0,0,1,0,0,0,0,0),
c(0,0,0,0,1,0,0,0,0)),
c(0,0,0,0))
# Scatterplot of raw residuals versus fitted values
plot(fitted(lm6.1), residuals(lm6.1)) # residuals() can be replaced by resid() or lm6.1$residuals
abline(h = seq(-40, 40, by = 20), col = "grey")
abline(v = seq( 10, 80, by = 10), col = "grey")
qqnorm(residuals(lm6.1))
qqline(residuals(lm6.1))
shapiro.test(lm6.1$residuals) # problem confirmed by shapiro.test
x11()
par(mfrow = c(2,2))
plot(lm6.1)
# Residual analysis
plot(lm6.1$residuals)
# let's color the residuals relative to different patients
colori = rainbow(length(unique(armd$subject)))
num_sub = table(armd$subject)
colori2 = rep(colori, num_sub)
plot(lm6.1$residuals, col=colori2)
abline(h=0)
boxplot(lm6.1$residuals ~ armd$subject, col=colori,
xlab='Subjects', ylab='Residuals',
main ='Distribution of residuals across patients')  # --> informative!
# let's color the residuals relative to different time instants
set.seed(1)
colori =rainbow(4)
colori2 = colori[armd$tp] # associate to each one of the 4 time instants a color
plot(lm6.1$residuals, col=colori2, ylab='residuals')
abline(h=0)
legend(650, -25, legend=c("time 4wks", "time 12wks", "time 24wks", "time 52wks"),
col=colori, lty=1, cex=0.7) # --> not very informative!
boxplot(lm6.1$residuals ~ armd$time.f, col=colori,
xlab='Time.f', ylab='Residuals') # --> informative
#____________________________________________________#
##### The model can be also fitted through gls() #####
#____________________________________________________#
require(nlme)              # Attach nlme package
fm6.1 <- gls(lm1.form, data = armd)
summary(fm6.1)
intervals(fm6.1)           # 95% CI for beta, sigmas
plot(predict(fm6.1), residuals(fm6.1))   # Same as before
qqnorm(residuals(fm6.1))                 # Same as before
qqline(residuals(fm6.1))
anscombe
# Four x-y datasets which have the same traditional statistical
# properties (mean, variance, correlation, regression line, etc.),
# yet are quite different.
attach(anscombe)
# dataset 1
lm1 <- lm(y1 ~ x1)
summary(lm1)
x11(width=14, height=7)
par(mfcol=c(2,4))
plot(x1,y1, main='Dataset 1')
abline(lm1)
plot(x1,residuals(lm1))
abline(h=0)
# dataset 2
lm2 <- lm(y2 ~ x2)
summary(lm2)
plot(x2,y2, main='Dataset 2')
abline(lm2)
plot(x2,residuals(lm2))
abline(h=0)
# same R^2, same coefficient estimate, same residual std error
# dataset 3
lm3 <- lm(y3 ~ x3)
summary(lm3)
plot(x3,y3, main='Dataset 3')
abline(lm3)
plot(x3,residuals(lm3))
abline(h=0)
# dataset 4
lm4 <- lm(y4 ~ x4)
summary(lm4)
plot(x4,y4, main='Dataset 4')
abline(lm4)
plot(x4,residuals(lm4))
abline(h=0)
