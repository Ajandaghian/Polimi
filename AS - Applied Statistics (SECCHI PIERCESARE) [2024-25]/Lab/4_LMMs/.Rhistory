rm(list=ls())
library(settings)
install.packages("settings")
rm(list=ls())
library(settings)
reset(options)
graphics.off()
library(nlmeU)  # --> for the dataset
install.packages("nlmeU")
rm(list=ls())
library(settings)
reset(options)
graphics.off()
library(nlmeU)  # --> for the dataset
library(nlme)   # --> for models implementation
library(lattice)
library(corrplot)
install.packages("corrplot")
rm(list=ls())
library(settings)
reset(options)
graphics.off()
library(nlmeU)  # --> for the dataset
library(nlme)   # --> for models implementation
library(lattice)
library(corrplot)
library(plot.matrix)
install.packages("plot.matrix")
rm(list=ls())
library(settings)
reset(options)
graphics.off()
library(nlmeU)  # --> for the dataset
library(nlme)   # --> for models implementation
library(lattice)
library(corrplot)
library(plot.matrix)
data(armd.wide) # --> wide format
head(armd.wide) # lesion and line0 contain additional information, which we won't use
help(armd.wide)
dim(armd.wide)
str(armd.wide)
data(armd0)     # --> long (or longitudinal) format
head(armd0)     # new features: time.f, time, tp, and visual
help(armd0)
dim(armd0)
str(armd0)
data(armd)      # --> long (or longitudinal) format (subset of armd0, without baseline)
head(armd)
help(armd)
dim(armd)
str(armd)
# armd was built from armd0 as follows:
auxDt <- subset(armd0, time > 0)          # Post-baseline measures
dim(auxDt)                                # No. of rows & cols
levels(auxDt$time.f)                      # Levels of treat.f
armd <- droplevels(auxDt)                 # Drop unused levels
levels(armd$time.f)                       # Baseline level dropped
armd <- within(armd, {                    # Contrasts assigned for dealing with ORDERED factors
contrasts(time.f) <- contr.poly(4, scores = c(4, 12, 24, 52)) # we are changing scores
# If you are interested in further details, see 1.5.1 in 1_5_Supplementary.R
})
armd0.subset <- subset(armd0, as.numeric(subject) %in% seq(1, 240, 5)) # 1 every 5 patients
xy1 <- xyplot(visual ~ time | treat.f,
# visual and time are plotted against each other in separate
# panels for different values of 'treat.f' factor.
groups = subject,
data = armd0.subset,
type = "l", lty = 1)
xy1 <- xyplot(visual ~ time | treat.f,
# visual and time are plotted against each other in separate
# panels for different values of 'treat.f' factor.
groups = subject,
data = armd0.subset,
type = "l", lty = 1)
update(xy1, xlab = "Time (in weeks)",
ylab = "Visual acuity",
grid = "h")
# Comments:
rm(list=ls())         # Clear all objects from the workspace
library(settings)     # Load the 'settings' package
reset(options)        # Reset all global options to their default values
graphics.off()
library(nlmeU)  # --> for the dataset
library(nlme)   # --> for models implementation
library(lattice)
library(corrplot)
library(plot.matrix)
data(armd.wide) # --> wide format
head(armd.wide) # lesion and line0 contain additional information, which we won't use
help(armd.wide)
str(armd.wide)         # Display the structure of 'armd.wide', showing data types of each column
data(armd0)     # --> long (or longitudinal) format
head(armd0)     # new features: time.f, time, tp, and visual
help(armd0)
dim(armd0)
str(armd0)
data(armd)      # --> long (or longitudinal) format (subset of armd0, without baseline)
head(armd)
help(armd)
dim(armd)
str(armd)
auxDt <- subset(armd0, time > 0)        # Create a new dataset 'auxDt' by selecting rows where 'time' is greater than 0 (post-baseline data)
dim(auxDt)                             # Get the dimensions (number of rows and columns) of 'auxDt'
levels(auxDt$time.f)                   # Show the levels of the factor variable 'time.f' in the dataset 'auxDt'
View(auxDt)
levels(auxDt$time.f)                      # Levels of treat.f
armd <- droplevels(auxDt)                 # Drop unused levels
levels(armd$time.f)                       # Baseline level dropped
View(armd)
armd <- within(armd, {                    # Contrasts assigned for dealing with ORDERED factors
contrasts(time.f) <- contr.poly(4, scores = c(4, 12, 24, 52)) # we are changing scores
# If you are interested in further details, see 1.5.1 in 1_5_Supplementary.R
})
armd0.subset <- subset(armd0, as.numeric(subject) %in% seq(1, 240, 5)) # 1 every 5 patients
xy1 <- xyplot(visual ~ time | treat.f,
# visual and time are plotted against each other in separate
# panels for different values of 'treat.f' factor.
groups = subject,
data = armd0.subset,
type = "l", lty = 1)
xy1 <- xyplot(visual ~ time | treat.f,
# visual and time are plotted against each other in separate
# panels for different values of 'treat.f' factor.
groups = subject,
data = armd0.subset,
type = "l", lty = 1)
update(xy1, xlab = "Time (in weeks)",
ylab = "Visual acuity",
grid = "h")
xy1 <- xyplot(visual ~ time | treat.f,
# visual and time are plotted against each other in separate
# panels for different values of 'treat.f' factor.
groups = subject,
data = armd0.subset,
type = "l", lty = 1)
update(xy1, xlab = "Time (in weeks)",
ylab = "Visual acuity",
grid = "h")
xy1 <- xyplot(visual ~ time | treat.f,
# visual and time are plotted against each other in separate
# panels for different values of 'treat.f' factor.
groups = subject,
data = armd0.subset,
type = "l", lty = 1)
update(xy1, xlab = "Time (in weeks)",
ylab = "Visual acuity",
grid = "h")
# The factor miss.pat that indicates which of the four
# post-randomization measurements are missing for a particular patient
table(armd.wide$miss.pat)
# sample means across time and treatment
flst <- list(armd0$time.f, armd0$treat.f)                                     # "By" factors
(tN <-  tapply(armd0$visual, flst, FUN = function(x) length(x[!is.na(x)])))   # Counts
tMn <- tapply(armd0$visual, flst, FUN = mean)     # Sample means
tMd <- tapply(armd0$visual, flst, FUN = median)   # Sample medians
colnames(res  <- cbind(tN, tMn, tMd))             # Column names
nms1 <- rep(c("P", "A"), 3)
nms2 <- rep(c("n", "Mean", "Median"), rep(2, 3))
colnames(res) <- paste(nms1, nms2, sep = ":")     # New column names
res
bw1 <- bwplot(visual ~ time.f | treat.f, data = armd0)  # bwplot from package lattice
xlims <- c("Base", "4\nwks", "12\nwks", "24\nwks", "52\nwks")
update(bw1, xlim = xlims, pch = "|")
# measurements for complete cases only (n = 188)
visual.x <- subset(armd.wide, select = c(visual0:visual52))
(varx <- var(visual.x, use = "complete.obs"))            # Var-cov matrix
plot(varx, col=colorRampPalette(c("blue", "white", "red")))
# increase of the variance of visual acuity measurements obtained at later timepoints.
diag(varx)                                               # Var-cov diagonal elements
print(cor(visual.x, use = "complete.obs"), digits = 2)   # Corr matrix
cov2cor(varx)                                            # Corr matrix (alternative way)
plot(cov2cor(varx), col=colorRampPalette(c("blue", "white", "red")))
#______________________________________________________________________________#
##### 1.1.3 ARMD Trial: Linear Model with Homogeneous Variance (Chapter 6) #####
#______________________________________________________________________________#
data(armd, package = "nlmeU")
data(armd, package = "nlmeU")
lm1.form <- formula(visual ~ -1 + visual0 + time.f + treat.f:time.f )
# we now fit the linear model
lm6.1 <- lm(lm1.form, data = armd)         # through lm()
lm6.1
summ <- summary(lm6.1)                     # Summary
summ
setwd("~/Documents/Polimi/Y 02")
setwd("~/Documents/Polimi/Y 02/Polimi - Git/AS - Applied Statistics (SECCHI PIERCESARE) [2024-25]/Lab/4_LMMs")
library(lme4)
```{r}
library(corrplot)
#_________________ Applied Statistics 2024/2025 _______________________________
#### 4.1.Linear Mixed-effects models: ARMD Trial - Homoscedastic Residuals ####
#_____________________________________________________________________________#
library(nlmeU)
library(corrplot)
library(nlme)
library(lattice)
library(plot.matrix)
library(lme4)
library(insight)
rm(list=ls())
graphics.off()
rm(list=ls())
graphics.off()
library(nlmeU)
#_________________ Applied Statistics 2024/2025 _______________________________
#### 4.1.Linear Mixed-effects models: ARMD Trial - Homoscedastic Residuals ####
#_____________________________________________________________________________#
library(nlmeU)
library(corrplot)
library(nlme)
library(lattice)
library(plot.matrix)
library(lme4)
library(insight)
rm(list=ls())
graphics.off()
#--> Interpretation of random effects and PVRE #--> Diagnostic #--> Models comparison #--> Tests for the random components
data(armd, package = "nlmeU") # Age-Related Macular Degeneration rlims <- c(-4.5, 4.5) xlims <- c(0, 90) xlimc <- c("4", "12", "24", "52wks")
#--> Interpretation of random effects and PVRE #--> Diagnostic #--> Models comparison #--> Tests for the random components
data(armd, package = "nlmeU") # Age-Related Macular Degeneration rlims <- c(-4.5, 4.5) xlims <- c(0, 90) xlimc <- c("4", "12", "24", "52wks")
library(nlmeU)
library(corrplot)
library(nlme)
library(lattice)
library(plot.matrix)
library(lme4)
library(insight)
rm(list=ls())
graphics.off()
data
data(armd, package = "nlmeU") # Age-Related Macular Degeneration
rlims <- c(-4.5, 4.5)
xlims <- c(0, 90)
xlimc <- c("4", "12", "24", "52wks")
# We now treat time as a numeric variable (as assessed in the last lab)
lm2.form <- formula(visual ~ visual0 + time + treat.f + treat.f:time)
(fm16.1 <- lme(lm2.form, random = ~1|subject, data = armd))
# By default, lme() assumes independent residual errors with a constant variance, sigma^2.
# The default REML estimation is used --> to change it to the ML estimation, put method="ML"
summary(fm16.1)
# sigma*sqrt(d11) = 8.98 (standard deviation of the random intercepts)
# sigma = 8.63           (residual standard deviation)
# print out the estimated fixed-effects table
printCoefmat(summary(fm16.1)$tTable, has.Pvalue = TRUE, P.values = TRUE)
# Remember: t-test statistics for the fixed-effects coefficients (marginal-approach)
# to get the confidence intervals of all the estimated parameters
intervals(fm16.1)
# Var-Cov matrix of fixed-effects
vcovb <- vcov(fm16.1)
vcovb
# and Correlation of fixed effects
corb <- cov2cor(vcovb)
nms <- abbreviate(names(fixef(fm16.1)), 5)
rownames(corb) <- nms
corb
# Var-Cov matrix of random-effects and residuals (what we observe in the summary)
print(vc <- VarCorr(fm16.1), comp = c("Variance", "Std.Dev."))
VarCorr(fm16.1)
var_eps = as.numeric(vc[2,1])
var_eps
sd_eps <- summary(fm16.1)$sigma
sd_eps
var_b = as.numeric(vc[1,1])
var_b
getVarCov(fm16.1,
type = "conditional",       # sigma^2 * R_i = 74.434 * I4
individual = "2")
# Conditioned to the random effects b_i --> var-cov of the errors are independent and homoscedastic
# we extract sigma^2 * Ri for patients i=2,3,4
sR = getVarCov(fm16.1, type = "conditional", individual = 2:4)
# and we plot them
plot(as.matrix(bdiag(sR$`2`, sR$`3`, sR$`4`)),
col=colorRampPalette(c("blue", "white", "red")),
main = 'Conditional estimated Var-Cov matrix of Y given b')
# --> the marginal variance-covariance matrix of Y (block-diagonal matrix)
#     sigma^2 * V_i for the second subject (type='marginal')
(sVi = getVarCov(fm16.1,
type = "marginal",      # sigma^2 * V_i: sigma^2*d11 extra-diagonal and sigma^2+d11 on main diagonal
individual = "2"))
(cov2cor(sVi[[1]]))               # Corr(sigma^2 * V_i)
# we extract sigma^2 * V_i for patients i=2,3,4
sV <- getVarCov(fm16.1, type = "marginal", individual = 2:4)
# visualization
plot(as.matrix(bdiag(sV$`2`, sV$`3`, sV$`4`)), #-> V is a block-diagional matrix, the marginal var-cov matrix
col=colorRampPalette(c("blue", "white", "red")),
main = 'Marginal estimated Var-Cov matrix of Y')
# PVRE
#------#
# i.e. the Percentage of Variance explained by the Random Effect (PVRE).
# This is also called the intraclass correlation (ICC),
# because it is also an estimate of the within group correlation.
PVRE <- var_b/(var_b+var_eps)
PVRE # it is high!
# fixed effects
# we plot the "classical" linear model for visualizing the fixed effects (without intercept)
fm16.1GLS <- gls(lm2.form, data = armd)
library(sjPlot)
plot_model(fm16.1GLS)
plot_model(fm16.1)
```
# Visualization of confidence intervals
#--------------------------------------#
intervals(fm16.1)
# fixed effects
# we plot the "classical" linear model for visualizing the fixed effects (without intercept)
fm16.1GLS <- gls(lm2.form, data = armd)
library(sjPlot)
plot_model(fm16.1GLS)
plot_model(fm16.1)
```{r}
# random effects
## visualization of the random intercepts with their 95% confidence intervals
# Random effects: b_0i for i=1,...,234
re = ranef(fm16.1)
dat = data.frame(x= row.names(re),y=re[,attr(re,'effectName')])
# The dotplot shows the point and interval estimates for the random effects
# ordered
dotplot(reorder(x,y)~y,data=dat)
# not ordered
plot(ranef(fm16.1))
#_____________________________________________________________________________
# nicer visualization of the random effects with lmer() function
# formulation with lmer() for including a random intercept at subject level
fm16.1mer <- lmer(visual ~ visual0 + time * treat.f + (1|subject), data = armd)
# we can highligh which are significantly different from the mean (0)
# visualization of the random intercepts with their 95% confidence intervals
dotplot(ranef(fm16.1mer))
#install.packages('TMB', type = 'source')
plot_model(fm16.1mer, type='re') #--> positive (blu) and negative (red) effect
#_____________________________________________________________________________
#_____________________________________________________________________________
# nicer visualization of the random effects with lmer() function
# formulation with lmer() for including a random intercept at subject level
fm16.1mer <- lmer(visual ~ visual0 + time * treat.f + (1|subject), data = armd)
# we can highligh which are significantly different from the mean (0)
# visualization of the random intercepts with their 95% confidence intervals
dotplot(ranef(fm16.1mer))
#install.packages('TMB', type = 'source')
plot_model(fm16.1mer, type='re') #--> positive (blu) and negative (red) effect
#_____________________________________________________________________________
