rm(list=ls())
library(settings)
install.packages("settings")
rm(list=ls())
library(settings)
reset(options)
graphics.off()
library(nlmeU)  # --> for the dataset
install.packages("nlmeU")
rm(list=ls())
library(settings)
reset(options)
graphics.off()
library(nlmeU)  # --> for the dataset
library(nlme)   # --> for models implementation
library(lattice)
library(corrplot)
install.packages("corrplot")
rm(list=ls())
library(settings)
reset(options)
graphics.off()
library(nlmeU)  # --> for the dataset
library(nlme)   # --> for models implementation
library(lattice)
library(corrplot)
library(plot.matrix)
install.packages("plot.matrix")
rm(list=ls())
library(settings)
reset(options)
graphics.off()
library(nlmeU)  # --> for the dataset
library(nlme)   # --> for models implementation
library(lattice)
library(corrplot)
library(plot.matrix)
data(armd.wide) # --> wide format
head(armd.wide) # lesion and line0 contain additional information, which we won't use
help(armd.wide)
dim(armd.wide)
str(armd.wide)
data(armd0)     # --> long (or longitudinal) format
head(armd0)     # new features: time.f, time, tp, and visual
help(armd0)
dim(armd0)
str(armd0)
data(armd)      # --> long (or longitudinal) format (subset of armd0, without baseline)
head(armd)
help(armd)
dim(armd)
str(armd)
# armd was built from armd0 as follows:
auxDt <- subset(armd0, time > 0)          # Post-baseline measures
dim(auxDt)                                # No. of rows & cols
levels(auxDt$time.f)                      # Levels of treat.f
armd <- droplevels(auxDt)                 # Drop unused levels
levels(armd$time.f)                       # Baseline level dropped
armd <- within(armd, {                    # Contrasts assigned for dealing with ORDERED factors
contrasts(time.f) <- contr.poly(4, scores = c(4, 12, 24, 52)) # we are changing scores
# If you are interested in further details, see 1.5.1 in 1_5_Supplementary.R
})
armd0.subset <- subset(armd0, as.numeric(subject) %in% seq(1, 240, 5)) # 1 every 5 patients
xy1 <- xyplot(visual ~ time | treat.f,
# visual and time are plotted against each other in separate
# panels for different values of 'treat.f' factor.
groups = subject,
data = armd0.subset,
type = "l", lty = 1)
xy1 <- xyplot(visual ~ time | treat.f,
# visual and time are plotted against each other in separate
# panels for different values of 'treat.f' factor.
groups = subject,
data = armd0.subset,
type = "l", lty = 1)
update(xy1, xlab = "Time (in weeks)",
ylab = "Visual acuity",
grid = "h")
# Comments:
rm(list=ls())         # Clear all objects from the workspace
library(settings)     # Load the 'settings' package
reset(options)        # Reset all global options to their default values
graphics.off()
library(nlmeU)  # --> for the dataset
library(nlme)   # --> for models implementation
library(lattice)
library(corrplot)
library(plot.matrix)
data(armd.wide) # --> wide format
head(armd.wide) # lesion and line0 contain additional information, which we won't use
help(armd.wide)
str(armd.wide)         # Display the structure of 'armd.wide', showing data types of each column
data(armd0)     # --> long (or longitudinal) format
head(armd0)     # new features: time.f, time, tp, and visual
help(armd0)
dim(armd0)
str(armd0)
data(armd)      # --> long (or longitudinal) format (subset of armd0, without baseline)
head(armd)
help(armd)
dim(armd)
str(armd)
auxDt <- subset(armd0, time > 0)        # Create a new dataset 'auxDt' by selecting rows where 'time' is greater than 0 (post-baseline data)
dim(auxDt)                             # Get the dimensions (number of rows and columns) of 'auxDt'
levels(auxDt$time.f)                   # Show the levels of the factor variable 'time.f' in the dataset 'auxDt'
View(auxDt)
levels(auxDt$time.f)                      # Levels of treat.f
armd <- droplevels(auxDt)                 # Drop unused levels
levels(armd$time.f)                       # Baseline level dropped
View(armd)
armd <- within(armd, {                    # Contrasts assigned for dealing with ORDERED factors
contrasts(time.f) <- contr.poly(4, scores = c(4, 12, 24, 52)) # we are changing scores
# If you are interested in further details, see 1.5.1 in 1_5_Supplementary.R
})
armd0.subset <- subset(armd0, as.numeric(subject) %in% seq(1, 240, 5)) # 1 every 5 patients
xy1 <- xyplot(visual ~ time | treat.f,
# visual and time are plotted against each other in separate
# panels for different values of 'treat.f' factor.
groups = subject,
data = armd0.subset,
type = "l", lty = 1)
xy1 <- xyplot(visual ~ time | treat.f,
# visual and time are plotted against each other in separate
# panels for different values of 'treat.f' factor.
groups = subject,
data = armd0.subset,
type = "l", lty = 1)
update(xy1, xlab = "Time (in weeks)",
ylab = "Visual acuity",
grid = "h")
xy1 <- xyplot(visual ~ time | treat.f,
# visual and time are plotted against each other in separate
# panels for different values of 'treat.f' factor.
groups = subject,
data = armd0.subset,
type = "l", lty = 1)
update(xy1, xlab = "Time (in weeks)",
ylab = "Visual acuity",
grid = "h")
xy1 <- xyplot(visual ~ time | treat.f,
# visual and time are plotted against each other in separate
# panels for different values of 'treat.f' factor.
groups = subject,
data = armd0.subset,
type = "l", lty = 1)
update(xy1, xlab = "Time (in weeks)",
ylab = "Visual acuity",
grid = "h")
# The factor miss.pat that indicates which of the four
# post-randomization measurements are missing for a particular patient
table(armd.wide$miss.pat)
# sample means across time and treatment
flst <- list(armd0$time.f, armd0$treat.f)                                     # "By" factors
(tN <-  tapply(armd0$visual, flst, FUN = function(x) length(x[!is.na(x)])))   # Counts
tMn <- tapply(armd0$visual, flst, FUN = mean)     # Sample means
tMd <- tapply(armd0$visual, flst, FUN = median)   # Sample medians
colnames(res  <- cbind(tN, tMn, tMd))             # Column names
nms1 <- rep(c("P", "A"), 3)
nms2 <- rep(c("n", "Mean", "Median"), rep(2, 3))
colnames(res) <- paste(nms1, nms2, sep = ":")     # New column names
res
bw1 <- bwplot(visual ~ time.f | treat.f, data = armd0)  # bwplot from package lattice
xlims <- c("Base", "4\nwks", "12\nwks", "24\nwks", "52\nwks")
update(bw1, xlim = xlims, pch = "|")
# measurements for complete cases only (n = 188)
visual.x <- subset(armd.wide, select = c(visual0:visual52))
(varx <- var(visual.x, use = "complete.obs"))            # Var-cov matrix
plot(varx, col=colorRampPalette(c("blue", "white", "red")))
# increase of the variance of visual acuity measurements obtained at later timepoints.
diag(varx)                                               # Var-cov diagonal elements
print(cor(visual.x, use = "complete.obs"), digits = 2)   # Corr matrix
cov2cor(varx)                                            # Corr matrix (alternative way)
plot(cov2cor(varx), col=colorRampPalette(c("blue", "white", "red")))
#______________________________________________________________________________#
##### 1.1.3 ARMD Trial: Linear Model with Homogeneous Variance (Chapter 6) #####
#______________________________________________________________________________#
data(armd, package = "nlmeU")
data(armd, package = "nlmeU")
lm1.form <- formula(visual ~ -1 + visual0 + time.f + treat.f:time.f )
# we now fit the linear model
lm6.1 <- lm(lm1.form, data = armd)         # through lm()
lm6.1
summ <- summary(lm6.1)                     # Summary
summ
setwd("~/Documents/Polimi/Y 02")
setwd("~/Documents/Polimi/Y 02/Polimi - Git/AS - Applied Statistics (SECCHI PIERCESARE) [2024-25]/Lab/4_LMMs")
library(lme4)
```{r}
library(corrplot)
#_________________ Applied Statistics 2024/2025 _______________________________
#### 4.1.Linear Mixed-effects models: ARMD Trial - Homoscedastic Residuals ####
#_____________________________________________________________________________#
library(nlmeU)
library(corrplot)
library(nlme)
library(lattice)
library(plot.matrix)
library(lme4)
library(insight)
rm(list=ls())
graphics.off()
rm(list=ls())
graphics.off()
