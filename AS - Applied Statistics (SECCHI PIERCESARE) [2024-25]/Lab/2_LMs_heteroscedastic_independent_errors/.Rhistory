library(nlmeU) # for the data
library(lattice)
library(corrplot)
library(plot.matrix)
# More on control
args(glsControl)
?glsControl
# varFunc Class (Chapter 8.2)
?varClasses
# what gls() returns
?glsObject
?gls()  # see method
data(armd, package = "nlmeU")
lm1.form <- visual ~ -1 + visual0 + time.f + treat.f:time.f   # model defined last time
fm6.1 <- gls(lm1.form, data = armd)
summary(fm6.1)
par(mar = c(4,4,4,4))
plot(diag(x=12.38^2, nrow=8, ncol=8),
col=colorRampPalette(c("blue", "white", "red")),
main='Variance-covariance matrix of Y')
##### varFixed() #####
?varFixed
#                                  {sigma*sqrt(4)   for t=1(4wks),
# sqrt(Var(VISUAL_it)) = sigma_t = {sigma*sqrt(12)  for t=2(12wks),
#                                  {sigma*sqrt(24)  for t=3(24wks),
#                                  {sigma*sqrt(52)  for t=4(52wks).
fm9.0 <- gls(visual ~ -1 + visual0 + time.f + treat.f:time.f,
method = 'REML',                   # default
weights = varFixed(value = ~time), # Var.function; lambda_i(v_i) (v_i is known and observable)
data = armd)
#                                  {sigma*sqrt(4)   for t=1(4wks),
# sqrt(Var(VISUAL_it)) = sigma_t = {sigma*sqrt(12)  for t=2(12wks),
#                                  {sigma*sqrt(24)  for t=3(24wks),
#                                  {sigma*sqrt(52)  for t=4(52wks).
fm9.0 <- gls(visual ~ -1 + visual0 + time.f + treat.f:time.f,
method = 'REML',                   # default
weights = varFixed(value = ~time), # Var.function; lambda_i(v_i) (v_i is known and observable)
data = armd)
# NB. the variance covariate needs to be continuous: if we put time.f, it doesn't work!
# Try to change between 'REML' and 'ML' and see that results are different!
summary(fm9.0)
alpha = 0.05
alpha = 0.05
intervals(fm9.0, which="coef", level = 1 - alpha)    # 1 - alpha/length(lm9.0$coefficients) if Bonferroni correction
intervals(fm6.1, which="coef", level = 1 - alpha)    # they are different!
intervals(fm9.0, which="var-cov", level = 1 - alpha)
intervals(fm6.1, which="var-cov", level = 1 - alpha)
anova(fm6.1, fm9.0) # we can compare the models to see which one is better (lower AIC)
par(mar = c(4,4,4,4))
plot(diag(x=c( 4 * 3.222976^2, # v_i * sigma^2
12 * 3.222976^2,
24 * 3.222976^2,
52 * 3.222976^2), nrow=8, ncol=8),
col=colorRampPalette(c("blue", "white", "red")),
main='Variance-covariance matrix of Y - VarIdent() - Model 9.0')
# another example
# we suppose that the variance is proportional to 1/visual0
fm9.0b <- gls(lm1.form, weights = varFixed(value = ~I(1/visual0)), data = armd)
summary(fm9.0b)
# another example
# we suppose that the variance is proportional to 1/visual0
fm9.0b <- gls(lm1.form, weights = varFixed(value = ~I(1/visual0)), data = armd)
summary(fm9.0b)
anova(fm6.1, fm9.0, fm9.0b)
lm1.form <- formula(visual ~ -1 + visual0 + time.f + treat.f:time.f)
fm9.1 <- gls(lm1.form,
weights = varIdent(form = ~1|time.f), # Var.function; <delta>-group i.e. lambda(delta,v)
data = armd)
summary(fm9.1)
?varIdent
lm1.form <- formula(visual ~ -1 + visual0 + time.f + treat.f:time.f)
fm9.1 <- gls(lm1.form,
weights = varIdent(form = ~1|time.f), # Var.function; <delta>-group i.e. lambda(delta,v)
data = armd)
summary(fm9.1)
fm9.1$modelStruct$varStruct             # delta1=1, delta_2 = sigma_2/sigma_1, ...
# Visualization of variance-covariance matrix of Y (8 observations, 2 patients)
par(mar = c(4,4,4,4))
plot(diag(x=c(1.000000^2 * 8.244094^2, # delta_t^2 * sigma^2
1.397600^2 * 8.244094^2,
1.664321^2 * 8.244094^2,
1.880852^2 * 8.244094^2), nrow=8, ncol=8),
col=colorRampPalette(c("blue", "white", "red")),
main='Variance-covariance matrix of Y - VarIdent() - Model 9.1')
# This is consistent with the results of exploratory analysis, e.g.:
bw1 <- bwplot(visual ~ time.f, data = armd)
xlims <- c("4\nwks", "12\nwks", "24\nwks", "52\nwks")
update(bw1, xlim = xlims, pch = "|")
(intervals(fm9.1, which = "var-cov"))   # 95% CI for delta2,3,4 & sigma (cfr book 7.6.2)
# Thus, we can use the LR test to test the null hypothesis of homoscedasticity.
anova(fm6.1, fm9.1)                     # fm6.1 nested in fm9.1
###### model 9.2 (REML estimation) ######
# <delta>-group i.e. lambda(delta,v)
# delta scalar, no strata
# sigma_it = sigma * lambda_it
#          = sigma * lambda(delta, TIME_it)
#          = sigma * |TIME_it|^delta
fm9.2 <- update(fm9.1,
weights = varPower(form = ~time))           # <delta>-group
# NB. continuous-time variable "time" rather than to the factor "time.f"
#     if you set time.f, there would be an error
?varPower # read form to better understand
fm9.2$modelStruct$varStruct                          # our delta is estimated
# Visualization of Variance-covariance matrix of Y (8 observations - 2 subjects)
par(mar = c(4,4,4,4))
plot(diag(x=c( 4^(2*0.2519332) * 5.974906^2, # TIME_it^{2*delta} * sigma^2
12^(2*0.2519332) * 5.974906^2,
24^(2*0.2519332) * 5.974906^2,
52^(2*0.2519332) * 5.974906^2), nrow=8, ncol=8),
col=colorRampPalette(c("blue", "white", "red")),
main='Variance-covariance matrix of Y - VarPower() - Model 9.2')
# Visualization of Variance-covariance matrix of Y (8 observations - 2 subjects)
par(mar = c(4,4,4,4))
plot(diag(x=c( 4^(2*0.2519332) * 5.974906^2, # TIME_it^{2*delta} * sigma^2
12^(2*0.2519332) * 5.974906^2,
24^(2*0.2519332) * 5.974906^2,
52^(2*0.2519332) * 5.974906^2), nrow=8, ncol=8),
col=colorRampPalette(c("blue", "white", "red")),
main='Variance-covariance matrix of Y - VarPower() - Model 9.2')
fm9.3 <- update(fm9.1,
weights = varPower(form = ~time|treat.f))   # <delta>-group
fm9.3$modelStruct$varStruct
fm9.3 <- update(fm9.1,
weights = varPower(form = ~time|treat.f))   # <delta>-group
fm9.3$modelStruct$varStruct
coef(fm9.3$modelStruct$varStruct)   # same, for getting coefficients
summary(fm9.3)
?varWeigths
?varWeights
varWeights(fm9.3$modelStruct$varStruct)  # Variance weights: 1/^lambda_i
par(mar = c(4,4,4,4))
plot(diag(x=c(  4^(2*0.2532485) * 5.971599^2,  # ACTIVE - 4      # TIME_it^{2*delta_1} * sigma^2
12^(2*0.2532485) * 5.971599^2,  # ACTIVE - 12
24^(2*0.2532485) * 5.971599^2,  # ACTIVE - 24
52^(2*0.2532485) * 5.971599^2,  # ACTIVE - 52
4^(2*0.2511255) * 5.971599^2,  # PLACEBO - 4
12^(2*0.2511255) * 5.971599^2,  # PLACEBO - 12
24^(2*0.2511255) * 5.971599^2,  # PLACEBO - 24
52^(2*0.2511255) * 5.971599^2), nrow=8, ncol=8), # PLACEBO - 52
col=colorRampPalette(c("blue", "white", "red")),
plot(diag(x=c(  4^(2*0.2532485) * 5.971599^2,  # ACTIVE - 4      # TIME_it^{2*delta_1} * sigma^2
12^(2*0.2532485) * 5.971599^2,  # ACTIVE - 12
24^(2*0.2532485) * 5.971599^2,  # ACTIVE - 24
52^(2*0.2532485) * 5.971599^2,  # ACTIVE - 52
4^(2*0.2511255) * 5.971599^2,  # PLACEBO - 4
12^(2*0.2511255) * 5.971599^2,  # PLACEBO - 12
24^(2*0.2511255) * 5.971599^2,  # PLACEBO - 24
52^(2*0.2511255) * 5.971599^2), nrow=8, ncol=8), # PLACEBO - 52
col=colorRampPalette(c("blue", "white", "red")),
main='Variance-covariance matrix of Y - VarPower() - Model 9.3')
# Visualization of Variance-covariance matrix of Y (8 random observations, 2 patients, one active, one placebo)
par(mar = c(4,4,4,4))
# Visualization of Variance-covariance matrix of Y (8 random observations, 2 patients, one active, one placebo)
par(mar = c(4,4,4,4))
plot(diag(x=c(  4^(2*0.2532485) * 5.971599^2,  # ACTIVE - 4      # TIME_it^{2*delta_1} * sigma^2
12^(2*0.2532485) * 5.971599^2,  # ACTIVE - 12
24^(2*0.2532485) * 5.971599^2,  # ACTIVE - 24
52^(2*0.2532485) * 5.971599^2,  # ACTIVE - 52
4^(2*0.2511255) * 5.971599^2,  # PLACEBO - 4
12^(2*0.2511255) * 5.971599^2,  # PLACEBO - 12
24^(2*0.2511255) * 5.971599^2,  # PLACEBO - 24
52^(2*0.2511255) * 5.971599^2), nrow=8, ncol=8), # PLACEBO - 52
col=colorRampPalette(c("blue", "white", "red")),
main='Variance-covariance matrix of Y - VarPower() - Model 9.3')
fm9.4 <- update(fm9.1, weights = varPower())                # <delta,mu>-group
# NB. equivalent to varPower(form=~fitted(.)), which means that the fitted values ^mu_i are used
# see ?varPower() for more details
fm9.4$modelStruct$varStruct
summary(fm9.4)
par(mar = c(4,4,4,4))
plot(diag(x=15.50761^2 * fitted(fm9.4)[1:8]^(-0.05885895*2), nrow=8, ncol=8),
col=colorRampPalette(c("blue", "white", "red"))(10),
main='Variance-covariance matrix of Y - VarPower() - Model 9.4')
# they are slightly different!
print(15.50761^2 * fitted(fm9.4)[1:8]^(-0.05885895*2))
###### model 9.5 (REML-based IRLS) ######
# <mu>-group i.e. lambda(mu,v)
# delta = 1, no strata
# sigma_it = sigma * lambda_it
#          = sigma * lambda(mu_it)
#          = sigma * mu_it
# NB. the scale parameter can be interpreted as a coefficient of variation,
# constant for all timepoints.
fm9.5 <- update(fm9.1,
weights = varPower(fixed = 1))              # <mu>-group
fm9.5$modelStruct$varStruct
summary(fm9.5)
armd[1:9,] # 3 patients (3 "blocks": 11, 2222, 333)
par(mar = c(4,4,4,4))
plot(diag(x=0.2884781^2 * fitted(fm9.4)[1:9]^(1*2), nrow=9, ncol=9),
col=colorRampPalette(c("blue", "white", "red"))(10),
main='Variance-covariance matrix of Y - VarPower() - Model 9.5')
print(0.2884781^2 * fitted(fm9.4)[1:9]^(1*2))
##### Comparison between the models #####
# Likelihood Ratio (LR) tests
anova(fm9.2, fm9.3)                        # fm9.2 nested in fm9.3
anova(fm9.2, fm9.1)                        # fm9.2 nested in fm9.1
anova(fm9.5, fm9.4)                        # fm9.5 nested in fm9.4
# we check the AIC
AIC(fm9.1, fm9.2, fm9.3,
fm9.4, fm9.5)                         # Smaller AIC corresponds to a better fit
# model fm9.2 offers a better fit to the data than model fm9.4
anova(fm9.2, fm9.4)                       # anova() command for Non-nested models
# NB. the model is actually able to recognise whether two models are nested
anova(fm9.1, fm9.2, fm9.3,
fm9.4, fm9.5)
library(lattice)
# Raw residuals
plot(fm9.2, resid(., type = "response") ~ fitted(.))  # Raw residuals vs fitted
# Raw residuals
plot(fm9.2, resid(., type = "response") ~ fitted(.))  # Raw residuals vs fitted
plot(fm9.2, resid(., type = "response") ~ time)       # Raw residuals vs time
bwplot(resid(fm9.2, type='response') ~ time.f,        # Raw residuals vs time.f
pch = "|", data = armd)
plot(fm9.2, resid(., type = "pearson" ) ~ fitted(.)) # Pearson vs fitted
# similarly to before, asymmetric pattern
plot(fm9.2, resid(., type = "pearson") ~ time)       # Pearson vs time
plot(fm9.2, resid(., type = "pearson" ) ~ fitted(.)) # Pearson vs fitted
# similarly to before, asymmetric pattern
plot(fm9.2, resid(., type = "pearson") ~ time)       # Pearson vs time
bwplot( resid(fm9.2, type = "pearson") ~ time.f,     # Pearson vs time.f
pch = "|", data = armd)
plot(fm9.2, sqrt(abs(resid(., type = "response"))) ~ fitted(.),
type = c("p", "smooth"))
plot(fm9.2, sqrt(abs(resid(., type = "pearson"))) ~ fitted(.),
type = c("p", "smooth"))
plot(fm9.2, sqrt(abs(resid(., type = "response"))) ~ fitted(.),
type = c("p", "smooth"))
plot(fm9.2, sqrt(abs(resid(., type = "response"))) ~ fitted(.),
type = c("p", "smooth"))
plot(fm9.2, sqrt(abs(resid(., type = "pearson"))) ~ fitted(.),
type = c("p", "smooth"))
residP <- resid(fm9.2, type="p")
dtAux <- subset(armd, select = c(subject, visual, time, time.f, treat.f))
require(reshape)
dtP <- data.frame(dtAux, residP)
dtPm <- melt(dtP,
measure.var=c("residP"),
id.var = c("subject","time.f"))
dtPc <- cast(subject ~ time.f ~ variable, data = dtPm) # array
dtPc <- data.frame(dtPc)
names(dtPc) <- c("P4wks","P12wks","P24wks","P52wks")
head(dtPc)
range(dtPc, na.rm=TRUE)
library(ellipse)
my.upperPanel <-                           ## pairwise.complete.obs
function(x, y, subscripts, ...){
panel.xyplot(x, y, type = "n", ...)      # no plot
ic <- complete.cases(cbind(x,y))
mn <- c(mean(x[ic]), mean(y[ic]))
covx <- var(cbind(x,y), use="complete.obs")
# print(covx)
# ex <- ellipse(covx)
corrx <- cov2cor(covx)
corx <- round(corrx[1,2], 2)
abs.corx <- abs(corx)
# print(corx)
cex.value <- 3
ltext(0, 0, corx, cex = abs.corx * cex.value)
}
my.lowerPanel <-                          ## pairwise.complete.obs
function(x,y,subscripts,...){
panel.grid(h = -1, v = -1)
covx <- var(cbind(x, y), use = "complete.obs")
# print(covx)
ex <- ellipse(covx)
panel.xyplot(ex[ ,1], ex[ ,2], lty = 2, type = "l", ...)
panel.xyplot(x, y, ...)
}
mySuperPanel <- function(z, subscripts, panel.subscripts,...){
panel.pairs(z, subscripts = subscripts,
panel.subscripts = panel.subscripts,
as.matrix=TRUE,
upper.panel = "my.upperPanel",
lower.panel = "my.lowerPanel",
prepanel.limits = function(z) return(c(-4,4))
)
}
splom.form <- formula(~cbind(P4wks,P12wks,P24wks,P52wks))
splom.object <- splom(splom.form,
data=dtPc,             #### subset(armd240,miss.pat =="----"),
as.matrix=TRUE,        #### varnames = abbrev.names,
xlab="",
superpanel = mySuperPanel
)
print(splom.object)
rm(my.upperPanel,mySuperPanel,splom.object)
setwd("~/Documents/DATA/POLITECNICO/PHD/DIDATTICA/StatAppGes1SEM2324/Labs/2_LMs_heteroscedastic_independent_errors")
ù
library(nlme)  # for the models
library(nlmeU) # for the data
library(lattice)
library(corrplot)
library(plot.matrix)
# control
args(glsControl)
?glsControl
?gls()  # see method
data(armd, package = "nlmeU")
lm1.form <- visual ~ -1 + visual0 + time.f + treat.f:time.f   # model defined last time
fm6.1 <- gls(lm1.form, data = armd)
summary(fm6.1)
par(mar = c(4,4,4,4))
plot(diag(x=12.38^2, nrow=8, ncol=8),
col=colorRampPalette(c("blue", "white", "red")),
main='Variance-covariance matrix of Y')
##### varFixed() #####
?varFixed
#                                  {sigma*sqrt(4)   for t=1(4wks),
# sqrt(Var(VISUAL_it)) = sigma_t = {sigma*sqrt(12)  for t=2(12wks),
#                                  {sigma*sqrt(24)  for t=3(24wks),
#                                  {sigma*sqrt(52)  for t=4(52wks).
fm9.0 <- gls(visual ~ -1 + visual0 + time.f + treat.f:time.f,
method = 'REML',                   # default
weights = varFixed(value = ~time), # Var.function; lambda_i(v_i) (v_i is known and observable)
data = armd)
# NB. the variance covariate needs to be continuous: if we put time.f, it doesn't work!
# Try to change between 'REML' and 'ML' and see that results are different!
summary(fm9.0)
alpha = 0.05
intervals(fm9.0, which="coef", level = 1 - alpha)    # 1 - alpha/length(lm9.0$coefficients) if Bonferroni correction
intervals(fm6.1, which="coef", level = 1 - alpha)    # they are different!
intervals(fm9.0, which="var-cov", level = 1 - alpha)
intervals(fm6.1, which="var-cov", level = 1 - alpha)
anova(fm6.1, fm9.0) # we can compare the models to see which one is better (lower AIC)
# another example
# we suppose that the variance is proportional to 1/visual0
fm9.0b <- gls(lm1.form, weights = varFixed(value = ~I(1/visual0)), data = armd)
summary(fm9.0b)
anova(fm6.1, fm9.0, fm9.0b)
lm1.form <- formula(visual ~ -1 + visual0 + time.f + treat.f:time.f)
lm1.form <- formula(visual ~ -1 + visual0 + time.f + treat.f:time.f)
fm9.1 <- gls(lm1.form,
weights = varIdent(form = ~1|time.f), # Var.function; <delta>-group i.e. lambda(delta,v)
data = armd)
summary(fm9.1)
fm9.1$modelStruct$varStruct             # delta1=1, delta_2 = sigma_2/sigma_1, ...
# Visualization of variance-covariance matrix of Y (8 observations, 2 patients)
par(mar = c(4,4,4,4))
plot(diag(x=c(1.000000^2 * 8.244094^2, # delta_t^2 * sigma^2
1.397600^2 * 8.244094^2,
1.664321^2 * 8.244094^2,
1.880852^2 * 8.244094^2), nrow=8, ncol=8),
col=colorRampPalette(c("blue", "white", "red")),
main='Variance-covariance matrix of Y - VarIdent() - Model 9.1')
# This is consistent with the results of exploratory analysis, e.g.:
bw1 <- bwplot(visual ~ time.f, data = armd)
xlims <- c("4\nwks", "12\nwks", "24\nwks", "52\nwks")
update(bw1, xlim = xlims, pch = "|")
(intervals(fm9.1, which = "var-cov"))   # 95% CI for delta2,3,4 & sigma (cfr book 7.6.2)
# Thus, we can use the LR test to test the null hypothesis of homoscedasticity (fm6.1)
anova(fm6.1, fm9.1)                     # fm6.1 nested in fm9.1
###### model 9.2 (REML estimation) ######
# <delta>-group i.e. lambda(delta,v)
# delta scalar, no strata
# sigma_it = sigma * lambda_it
#          = sigma * lambda(delta, TIME_it)
#          = sigma * |TIME_it|^delta
fm9.2 <- update(fm9.1,
weights = varPower(form = ~time))           # <delta>-group
# NB. continuous-time variable "time" rather than to the factor "time.f"
#     if you set time.f, there would be an error
?varPower # read form to better understand
fm9.2$modelStruct$varStruct                          # our delta is estimated
summary(fm9.2)
par(mar = c(4,4,4,4))
plot(diag(x=c( 4^(2*0.2519332) * 5.974906^2, # TIME_it^{2*delta} * sigma^2
12^(2*0.2519332) * 5.974906^2,
24^(2*0.2519332) * 5.974906^2,
52^(2*0.2519332) * 5.974906^2), nrow=8, ncol=8),
col=colorRampPalette(c("blue", "white", "red")),
main='Variance-covariance matrix of Y - VarPower() - Model 9.2')
summary(fm9.2)
fm9.3 <- update(fm9.1,
weights = varPower(form = ~time|treat.f))   # <delta>-group
fm9.3$modelStruct$varStruct
summary(fm9.3)
coef(fm9.3$modelStruct$varStruct)   # same, for getting coefficients
summary(fm9.3)
varWeights(fm9.3$modelStruct$varStruct)  # Variance weights: 1/^lambda_i
# Visualization of Variance-covariance matrix of Y (8 random observations, 2 patients, one active, one placebo)
par(mar = c(4,4,4,4))
plot(diag(x=c(  4^(2*0.2532485) * 5.971599^2,  # ACTIVE - 4      # TIME_it^{2*delta_1} * sigma^2
12^(2*0.2532485) * 5.971599^2,  # ACTIVE - 12
24^(2*0.2532485) * 5.971599^2,  # ACTIVE - 24
52^(2*0.2532485) * 5.971599^2,  # ACTIVE - 52
4^(2*0.2511255) * 5.971599^2,  # PLACEBO - 4
12^(2*0.2511255) * 5.971599^2,  # PLACEBO - 12
24^(2*0.2511255) * 5.971599^2,  # PLACEBO - 24
52^(2*0.2511255) * 5.971599^2), nrow=8, ncol=8), # PLACEBO - 52
col=colorRampPalette(c("blue", "white", "red")),
main='Variance-covariance matrix of Y - VarPower() - Model 9.3')
?varPower()
# NB. equivalent to varPower(form=~fitted(.)), which means that the fitted values mu_i are used
# see ?varPower() for more details
fm9.4$modelStruct$varStruct
fm9.4 <- update(fm9.1, weights = varPower())                # <delta,mu>-group
# NB. equivalent to varPower(form=~fitted(.)), which means that the fitted values mu_i are used
# see ?varPower() for more details
fm9.4$modelStruct$varStruct
summary(fm9.4)
par(mar = c(4,4,4,4))
plot(diag(x=15.50761^2 * fitted(fm9.4)[1:8]^(-0.05885895*2), nrow=8, ncol=8),
col=colorRampPalette(c("blue", "white", "red"))(10),
main='Variance-covariance matrix of Y - VarPower() - Model 9.4')
# they are slightly different!
print(15.50761^2 * fitted(fm9.4)[1:8]^(-0.05885895*2))
###### model 9.5 (REML-based IRLS) ######
# <mu>-group i.e. lambda(mu,v)
# delta = 1, no strata
# sigma_it = sigma * lambda_it
#          = sigma * lambda(mu_it)
#          = sigma * mu_it
# NB. the scale parameter can be interpreted as a coefficient of variation,
# constant for all timepoints.
fm9.5 <- update(fm9.1,
weights = varPower(fixed = 1))              # <mu>-group
fm9.5$modelStruct$varStruct
fm9.5$modelStruct$varStruct
summary(fm9.5)
armd[1:9,] # 3 patients (3 "blocks": 11, 2222, 333)
par(mar = c(4,4,4,4))
plot(diag(x=0.2884781^2 * fitted(fm9.4)[1:9]^(1*2), nrow=9, ncol=9),
col=colorRampPalette(c("blue", "white", "red"))(10),
main='Variance-covariance matrix of Y - VarPower() - Model 9.5')
print(0.2884781^2 * fitted(fm9.4)[1:9]^(1*2))
##### Comparison between the models #####
# Likelihood Ratio (LR) tests
anova(fm9.2, fm9.3)                        # fm9.2 nested in fm9.3
anova(fm9.2, fm9.1)                        # fm9.2 nested in fm9.1
anova(fm9.5, fm9.4)                        # fm9.5 nested in fm9.4
# we check the AIC
AIC(fm9.1, fm9.2, fm9.3,
fm9.4, fm9.5)                         # Smaller AIC corresponds to a better fit
# model fm9.2 offers a better fit to the data than model fm9.4
anova(fm9.2, fm9.4)                       # anova() command for Non-nested models
# NB. the model is actually able to recognise whether two models are nested
anova(fm9.1, fm9.2, fm9.3,
fm9.4, fm9.5)
library(lattice)
# Raw residuals
plot(fm9.2, resid(., type = "response") ~ fitted(.))  # Raw residuals vs fitted
plot(fm9.2, resid(., type = "response") ~ time)       # Raw residuals vs time
bwplot(resid(fm9.2, type='response') ~ time.f,        # Raw residuals vs time.f
pch = "|", data = armd)
plot(fm9.2, resid(., type = "pearson" ) ~ fitted(.)) # Pearson vs fitted
plot(fm9.2, resid(., type = "pearson" ) ~ fitted(.)) # Pearson vs fitted
# similarly to before, asymmetric pattern
plot(fm9.2, resid(., type = "pearson") ~ time)       # Pearson vs time
bwplot( resid(fm9.2, type = "pearson") ~ time.f,     # Pearson vs time.f
pch = "|", data = armd)
plot(fm9.2, sqrt(abs(resid(., type = "response"))) ~ fitted(.),
type = c("p", "smooth"))
plot(fm9.2, sqrt(abs(resid(., type = "pearson"))) ~ fitted(.),
type = c("p", "smooth"))
residP <- resid(fm9.2, type="p")
dtAux <- subset(armd, select = c(subject, visual, time, time.f, treat.f))
require(reshape)
dtP <- data.frame(dtAux, residP)
dtPm <- melt(dtP,
measure.var=c("residP"),
id.var = c("subject","time.f"))
dtPc <- cast(subject ~ time.f ~ variable, data = dtPm) # array
dtPc <- data.frame(dtPc)
names(dtPc) <- c("P4wks","P12wks","P24wks","P52wks")
head(dtPc)
range(dtPc, na.rm=TRUE)
library(ellipse)
my.upperPanel <-                           ## pairwise.complete.obs
function(x, y, subscripts, ...){
panel.xyplot(x, y, type = "n", ...)      # no plot
ic <- complete.cases(cbind(x,y))
mn <- c(mean(x[ic]), mean(y[ic]))
covx <- var(cbind(x,y), use="complete.obs")
# print(covx)
# ex <- ellipse(covx)
corrx <- cov2cor(covx)
corx <- round(corrx[1,2], 2)
abs.corx <- abs(corx)
# print(corx)
cex.value <- 3
ltext(0, 0, corx, cex = abs.corx * cex.value)
}
my.lowerPanel <-                          ## pairwise.complete.obs
function(x,y,subscripts,...){
panel.grid(h = -1, v = -1)
covx <- var(cbind(x, y), use = "complete.obs")
# print(covx)
ex <- ellipse(covx)
panel.xyplot(ex[ ,1], ex[ ,2], lty = 2, type = "l", ...)
panel.xyplot(x, y, ...)
}
mySuperPanel <- function(z, subscripts, panel.subscripts,...){
panel.pairs(z, subscripts = subscripts,
panel.subscripts = panel.subscripts,
as.matrix=TRUE,
upper.panel = "my.upperPanel",
lower.panel = "my.lowerPanel",
prepanel.limits = function(z) return(c(-4,4))
)
}
splom.form <- formula(~cbind(P4wks,P12wks,P24wks,P52wks))
splom.object <- splom(splom.form,
data=dtPc,             #### subset(armd240,miss.pat =="----"),
as.matrix=TRUE,        #### varnames = abbrev.names,
xlab="",
superpanel = mySuperPanel
)
print(splom.object)
rm(my.upperPanel,mySuperPanel,splom.object)
# The scatterplots clearly show a violation of the assumption
#
