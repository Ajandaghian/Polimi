for (i in 1:Ntot) {
fixed_means[i] = dot_product(X[i, :], regressors);
}
}
model {
int j = 1;
omega ~ dirichlet(rep_vector(1, M_max) * alpha);
b[1:M_max] ~ multi_normal_cholesky(rep_vector(0,z_size), diag_matrix(1,z_size));
regressors ~ normal(0, 1);
for (i in 1:Ngroups) {
real log_probas[M_max] = log(omega);
for (k in 1:group_sizes[i]) {
for (m in 1:M_max) {
log_probas[m] += poisson_lpmf(y[j] | log(fixed_means[j] + dot_product(Z[j, :], b[m])));
}
j = j+1;
}
target += log_sum_exp(log_probas);
}
}
generated quantities {
vector[Ngroups] clus_allocs;
for (i in 1:Ngroups) {
real log_probas[M_max] = log(omega);
for (k in 1:group_sizes[i]) {
for (m in 1:M_max) {
log_probas[m] += poisson_lpmf(y[j] | log(fixed_means[j] + dot_product(Z[j, :], b[m])));
}
j = j+1;
}
clus_allocs[i] = categorical_rng(softmax(log_probas));
}
}
"
# Compile the Stan model
stan_model <- stan_model(model_code = stan_model_code)
# Define the Stan model code
stan_model_code <- "
data {
int<lower=1> Ntot;
int<lower=1> Ngroups;
int<lower=1> x_size;
int<lower=1> z_size;
int<lower=1> M_max;
real<lower=0> alpha; // Tipically 1 / M_max;
vector[Ntot] y;
int<lower=1> group_sizes[Ngroups];
matrix[Ntot, x_size] X;
matrix[Ntot, z_size] Z;
}
parameters {
vector[z_size] b[M_max];
vector[x_size] regressors;
simplex[M_max] omega;
}
transformed parameters {
vector[Ntot] fixed_means;
for (i in 1:Ntot) {
fixed_means[i] = dot_product(X[i, :], regressors);
}
}
model {
int j = 1;
omega ~ dirichlet(rep_vector(1, M_max) * alpha);
b[1:M_max] ~ multi_normal_cholesky(rep_vector(0,z_size), diag_matrix(rep_vector(1,z_size));
regressors ~ normal(0, 1);
for (i in 1:Ngroups) {
real log_probas[M_max] = log(omega);
for (k in 1:group_sizes[i]) {
for (m in 1:M_max) {
log_probas[m] += poisson_lpmf(y[j] | log(fixed_means[j] + dot_product(Z[j, :], b[m])));
}
j = j+1;
}
target += log_sum_exp(log_probas);
}
}
generated quantities {
vector[Ngroups] clus_allocs;
for (i in 1:Ngroups) {
real log_probas[M_max] = log(omega);
for (k in 1:group_sizes[i]) {
for (m in 1:M_max) {
log_probas[m] += poisson_lpmf(y[j] | log(fixed_means[j] + dot_product(Z[j, :], b[m])));
}
j = j+1;
}
clus_allocs[i] = categorical_rng(softmax(log_probas));
}
}
"
# Compile the Stan model
stan_model <- stan_model(model_code = stan_model_code)
# Define the Stan model code
stan_model_code <- "
data {
int<lower=1> Ntot;
int<lower=1> Ngroups;
int<lower=1> x_size;
int<lower=1> z_size;
int<lower=1> M_max;
real<lower=0> alpha; // Tipically 1 / M_max;
vector[Ntot] y;
int<lower=1> group_sizes[Ngroups];
matrix[Ntot, x_size] X;
matrix[Ntot, z_size] Z;
}
parameters {
vector[z_size] b[M_max];
vector[x_size] regressors;
simplex[M_max] omega;
}
transformed parameters {
vector[Ntot] fixed_means;
for (i in 1:Ntot) {
fixed_means[i] = dot_product(X[i, :], regressors);
}
}
model {
int j = 1;
omega ~ dirichlet(rep_vector(1, M_max) * alpha);
b[1:M_max] ~ multi_normal_cholesky(rep_vector(0,z_size), diag_matrix(rep_vector(1,z_size)));
regressors ~ normal(0, 1);
for (i in 1:Ngroups) {
real log_probas[M_max] = log(omega);
for (k in 1:group_sizes[i]) {
for (m in 1:M_max) {
log_probas[m] += poisson_lpmf(y[j] | log(fixed_means[j] + dot_product(Z[j, :], b[m])));
}
j = j+1;
}
target += log_sum_exp(log_probas);
}
}
generated quantities {
vector[Ngroups] clus_allocs;
for (i in 1:Ngroups) {
real log_probas[M_max] = log(omega);
for (k in 1:group_sizes[i]) {
for (m in 1:M_max) {
log_probas[m] += poisson_lpmf(y[j] | log(fixed_means[j] + dot_product(Z[j, :], b[m])));
}
j = j+1;
}
clus_allocs[i] = categorical_rng(softmax(log_probas));
}
}
"
# Compile the Stan model
stan_model <- stan_model(model_code = stan_model_code)
# Define the Stan model code
stan_model_code <- "
data {
int<lower=1> Ntot;
int<lower=1> Ngroups;
int<lower=1> x_size;
int<lower=1> z_size;
int<lower=1> M_max;
real<lower=0> alpha; // Tipically 1 / M_max;
vector[Ntot] y;
int<lower=1> group_sizes[Ngroups];
matrix[Ntot, x_size] X;
matrix[Ntot, z_size] Z;
}
parameters {
vector[z_size] b[M_max];
vector[x_size] regressors;
simplex[M_max] omega;
}
transformed parameters {
vector[Ntot] fixed_means;
for (i in 1:Ntot) {
fixed_means[i] = dot_product(X[i, :], regressors);
}
}
model {
int j = 1;
omega ~ dirichlet(rep_vector(1, M_max) * alpha);
b[1:M_max] ~ multi_normal_cholesky(rep_vector(0,z_size), diag_matrix(rep_vector(1,z_size)));
regressors ~ normal(0, 1);
for (i in 1:Ngroups) {
real log_probas[M_max] = log(omega);
for (k in 1:group_sizes[i]) {
for (m in 1:M_max) {
log_probas[m] += poisson_lpmf(y[j] | log(fixed_means[j] + dot_product(Z[j, :], b[m])));
}
j = j+1;
}
target += log_sum_exp(log_probas);
}
}
generated quantities {
vector[Ngroups] clus_allocs;
for (i in 1:Ngroups) {
vector[M_max] log_probas = log(omega);
for (k in 1:group_sizes[i]) {
for (m in 1:M_max) {
log_probas[m] += poisson_lpmf(y[j] | log(fixed_means[j] + dot_product(Z[j, :], b[m])));
}
j = j+1;
}
clus_allocs[i] = categorical_rng(softmax(log_probas));
}
}
"
# Compile the Stan model
stan_model <- stan_model(model_code = stan_model_code)
# Define the Stan model code
stan_model_code <- "
data {
int<lower=1> Ntot;
int<lower=1> Ngroups;
int<lower=1> x_size;
int<lower=1> z_size;
int<lower=1> M_max;
real<lower=0> alpha; // Tipically 1 / M_max;
vector[Ntot] y;
int<lower=1> group_sizes[Ngroups];
matrix[Ntot, x_size] X;
matrix[Ntot, z_size] Z;
}
parameters {
vector[z_size] b[M_max];
vector[x_size] regressors;
simplex[M_max] omega;
}
transformed parameters {
vector[Ntot] fixed_means;
for (i in 1:Ntot) {
fixed_means[i] = dot_product(X[i, :], regressors);
}
}
model {
int j = 1;
omega ~ dirichlet(rep_vector(1, M_max) * alpha);
b[1:M_max] ~ multi_normal_cholesky(rep_vector(0,z_size), diag_matrix(rep_vector(1,z_size)));
regressors ~ normal(0, 1);
for (i in 1:Ngroups) {
vector[M_max] log_probas = log(omega);
for (k in 1:group_sizes[i]) {
for (m in 1:M_max) {
log_probas[m] += poisson_lpmf(y[j] | log(fixed_means[j] + dot_product(Z[j, :], b[m])));
}
j = j+1;
}
target += log_sum_exp(log_probas);
}
}
generated quantities {
vector[Ngroups] clus_allocs;
for (i in 1:Ngroups) {
vector[M_max] log_probas = log(omega);
for (k in 1:group_sizes[i]) {
for (m in 1:M_max) {
log_probas[m] += poisson_lpmf(y[j] | log(fixed_means[j] + dot_product(Z[j, :], b[m])));
}
j = j+1;
}
clus_allocs[i] = categorical_rng(softmax(log_probas));
}
}
"
# Compile the Stan model
stan_model <- stan_model(model_code = stan_model_code)
# Define the Stan model code
stan_model_code <- "
data {
int<lower=1> Ntot;
int<lower=1> Ngroups;
int<lower=1> x_size;
int<lower=1> z_size;
int<lower=1> M_max;
real<lower=0> alpha; // Tipically 1 / M_max;
int<lower=0> y[Ntot];
int<lower=1> group_sizes[Ngroups];
matrix[Ntot, x_size] X;
matrix[Ntot, z_size] Z;
}
parameters {
vector[z_size] b[M_max];
vector[x_size] regressors;
simplex[M_max] omega;
}
transformed parameters {
vector[Ntot] fixed_means;
for (i in 1:Ntot) {
fixed_means[i] = dot_product(X[i, :], regressors);
}
}
model {
int j = 1;
omega ~ dirichlet(rep_vector(1, M_max) * alpha);
b[1:M_max] ~ multi_normal_cholesky(rep_vector(0,z_size), diag_matrix(rep_vector(1,z_size)));
regressors ~ normal(0, 1);
for (i in 1:Ngroups) {
vector[M_max] log_probas = log(omega);
for (k in 1:group_sizes[i]) {
for (m in 1:M_max) {
log_probas[m] += poisson_lpmf(y[j] | log(fixed_means[j] + dot_product(Z[j, :], b[m])));
}
j = j+1;
}
target += log_sum_exp(log_probas);
}
}
generated quantities {
vector[Ngroups] clus_allocs;
for (i in 1:Ngroups) {
vector[M_max] log_probas = log(omega);
for (k in 1:group_sizes[i]) {
for (m in 1:M_max) {
log_probas[m] += poisson_lpmf(y[j] | log(fixed_means[j] + dot_product(Z[j, :], b[m])));
}
j = j+1;
}
clus_allocs[i] = categorical_rng(softmax(log_probas));
}
}
"
# Compile the Stan model
stan_model <- stan_model(model_code = stan_model_code)
# Define the Stan model code
stan_model_code <- "
data {
int<lower=1> Ntot;
int<lower=1> Ngroups;
int<lower=1> x_size;
int<lower=1> z_size;
int<lower=1> M_max;
real<lower=0> alpha; // Tipically 1 / M_max;
int<lower=0> y[Ntot];
int<lower=1> group_sizes[Ngroups];
matrix[Ntot, x_size] X;
matrix[Ntot, z_size] Z;
}
parameters {
vector[z_size] b[M_max];
vector[x_size] regressors;
simplex[M_max] omega;
}
transformed parameters {
vector[Ntot] fixed_means;
for (i in 1:Ntot) {
fixed_means[i] = dot_product(X[i, :], regressors);
}
}
model {
int j = 1;
omega ~ dirichlet(rep_vector(1, M_max) * alpha);
b[1:M_max] ~ multi_normal_cholesky(rep_vector(0,z_size), diag_matrix(rep_vector(1,z_size)));
regressors ~ normal(0, 1);
for (i in 1:Ngroups) {
vector[M_max] log_probas = log(omega);
for (k in 1:group_sizes[i]) {
for (m in 1:M_max) {
log_probas[m] += poisson_lpmf(y[j] | log(fixed_means[j] + dot_product(Z[j, :], b[m])));
}
j = j+1;
}
target += log_sum_exp(log_probas);
}
}
generated quantities {
int j = 1;
vector[Ngroups] clus_allocs;
for (i in 1:Ngroups) {
vector[M_max] log_probas = log(omega);
for (k in 1:group_sizes[i]) {
for (m in 1:M_max) {
log_probas[m] += poisson_lpmf(y[j] | log(fixed_means[j] + dot_product(Z[j, :], b[m])));
}
j = j+1;
}
clus_allocs[i] = categorical_rng(softmax(log_probas));
}
}
"
# Compile the Stan model
stan_model <- stan_model(model_code = stan_model_code)
setwd("~/Documents/DATA/POLITECNICO/PHD/MixedEffects project/JRSSA/FirstReview/Stan_things")
setwd("~/Documents/DATA/POLITECNICO/PHD/MixedEffects project/JRSSA/FirstReview/Stan_things")
# Load the RStan package
library(rstan)
# Define the Stan model code
stan_model_code <- "
data {
int<lower=1> Ntot;
int<lower=1> Ngroups;
int<lower=1> x_size;
int<lower=1> z_size;
int<lower=1> M_max;
real<lower=0> alpha; // Tipically 1 / M_max;
int<lower=0> y[Ntot];
int<lower=1> group_sizes[Ngroups];
matrix[Ntot, x_size] X;
matrix[Ntot, z_size] Z;
}
parameters {
vector[z_size] b[M_max];
vector[x_size] regressors;
simplex[M_max] omega;
}
transformed parameters {
vector[Ntot] fixed_means;
for (i in 1:Ntot) {
fixed_means[i] = dot_product(X[i, :], regressors);
}
}
model {
int j = 1;
omega ~ dirichlet(rep_vector(1, M_max) * alpha);
b[1:M_max] ~ multi_normal_cholesky(rep_vector(0,z_size), diag_matrix(rep_vector(1,z_size)));
regressors ~ normal(0, 1);
for (i in 1:Ngroups) {
vector[M_max] log_probas = log(omega);
for (k in 1:group_sizes[i]) {
for (m in 1:M_max) {
log_probas[m] += poisson_lpmf(y[j] | log(fixed_means[j] + dot_product(Z[j, :], b[m])));
}
j = j+1;
}
target += log_sum_exp(log_probas);
}
}
generated quantities {
int j = 1;
vector[Ngroups] clus_allocs;
for (i in 1:Ngroups) {
vector[M_max] log_probas = log(omega);
for (k in 1:group_sizes[i]) {
for (m in 1:M_max) {
log_probas[m] += poisson_lpmf(y[j] | log(fixed_means[j] + dot_product(Z[j, :], b[m])));
}
j = j+1;
}
clus_allocs[i] = categorical_rng(softmax(log_probas));
}
}
"
# Compile the Stan model
stan_model <- stan_model(model_code = stan_model_code)
setwd("~/Documents/DATA/POLITECNICO/PHD/DIDATTICA/StatAppGes1SEM2425/Labs/5_Lattice_data")
knitr::opts_chunk$set(echo = TRUE)
library(rgeoda)
library(sf)
guerry_path <- system.file("extdata", "Guerry.shp", package = "rgeoda")
print(guerry_path)
guerry <- st_read(guerry_path)
queen_w <- queen_weights(guerry)
summary(queen_w)
# To check if weights matrix is symmetric
is_symmetric(queen_w)
# To check if weights matrix has isolates, or if any observation has no neighbors
has_isolates(queen_w)
weights_sparsity(queen_w) # A numeric value of spatial weights sparsity
nbrs <- get_neighbors(queen_w, idx = 1)
cat("\nNeighbors of the 1-st observation are:", nbrs)
lag <- spatial_lag(queen_w, guerry['Crm_prs'])
head(lag)
rook_w <- rook_weights(guerry)
summary(rook_w)
save_weights(rook_w, guerry['CODE_DE'], out_path = '/Users/alessandragni/Downloads/Guerry_r.gal',
layer_name = 'Guerry')
dist_thres <- min_distthreshold(guerry)
dist_thres
dist_w <- distance_weights(guerry, dist_thres)
summary(dist_w)
knn6_w <- knn_weights(guerry, 6)
summary(knn6_w)
crm_prp = guerry["Crm_prp"]
lisa <- local_moran(queen_w, crm_prp)
lms <- lisa_values(gda_lisa = lisa)
lms
pvals <- lisa_pvalues(lisa)
pvals
cats <- lisa_clusters(lisa, cutoff = 0.05)
cats
lbls <- lisa_labels(lisa)
lbls
lisa <- local_moran(queen_w, crm_prp, permutations = 9999)
pvals <- lisa_pvalues(lisa)
pvals
lisa <- local_moran(queen_w, crm_prp, cpu_threads = 4)
qsa <- local_quantilelisa(queen_w, crm_prp, 5, 5)
lisa_pvalues(qsa)
lisa_clusters(qsa)
plot(guerry)
queen_w <- queen_weights(guerry)
lisa <- local_moran(queen_w,  guerry['Crm_prs'])
lisa_colors <- lisa_colors(lisa)
lisa_labels <- lisa_labels(lisa)
lisa_clusters <- lisa_clusters(lisa)
plot(st_geometry(guerry),
col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}),
border = "#333333", lwd=0.2)
title(main = "Local Moran Map of Crm_prs")
legend('bottomleft', legend = lisa_labels, fill = lisa_colors, border = "#eeeeee")
guerry['moran_cluster'] <- lisa_clusters
lisa_clusters
lisa_p <- lisa_pvalues(lisa)
p_labels <- c("Not significant", "p <= 0.05", "p <= 0.01", "p <= 0.001")
p_colors <- c("#eeeeee", "#84f576", "#53c53c", "#348124")
plot(st_geometry(guerry),
col=sapply(lisa_p, function(x){
if (x <= 0.001) return(p_colors[4])
else if (x <= 0.01) return(p_colors[3])
else if (x <= 0.05) return (p_colors[2])
else return(p_colors[1])
}),
border = "#333333", lwd=0.2)
title(main = "Local Moran Map of Crm_prs")
legend('bottomleft', legend = p_labels, fill = p_colors, border = "#eeeeee")
